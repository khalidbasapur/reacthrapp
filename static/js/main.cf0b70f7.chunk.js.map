{"version":3,"sources":["pages/NavBar.js","pages/HomePage.js","pages/GoalSetting.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","to","activeClassName","HomePage","useStyles","makeStyles","theme","root","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","panelHeader","background","color","formWrapper","display","alignItems","flexDirection","GlobalCss","withStyles","margin","GoalSetting","classes","Box","className","flexGrow","Button","size","variant","Divider","ExpansionPanel","style","borderBottom","ExpansionPanelSummary","expandIcon","aria-controls","id","Typography","ExpansionPanelDetails","noValidate","autoComplete","Grid","container","direction","spacing","item","sm","TextField","label","type","InputLabelProps","shrink","TextareaAutosize","rowsMin","rowsMax","placeholder","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","required","fieldType","empAccess","mgrAccess","adminAccess","map","field","key","App","Container","maxWidth","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cf0b70f7.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from 'react-router-dom';\nimport HomeIcon from '@material-ui/icons/Home'\n\nconst NavBar = () => {\n    return (\n        <>\n            <nav>\n                <ul>\n                    <li>\n                        <NavLink to=\"/\" activeClassName=\"active\">\n                            <HomeIcon />\n                        </NavLink>\n                        <NavLink to=\"/goal-setting\" activeClassName=\"active\">Manage Goal</NavLink>\n                    </li>\n                </ul>\n            </nav>\n        </>\n    )\n};\n\nexport default NavBar;\n\n","import React from 'react'\n\nconst HomePage = () => (\n    <>\n        <h1>Home Page</h1>\n    </>\n);\n\nexport default HomePage;","import React from 'react';\nimport { Box, Button, Divider, makeStyles, ExpansionPanel, ExpansionPanelSummary, Typography, ExpansionPanelDetails, TextField, Grid, withStyles, TextareaAutosize, TableContainer, Paper, Table, TableHead, TableRow, TableCell, TableBody } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%'\n    },\n    heading: {\n        fontSize : theme.typography.pxToRem(14),\n        fontWeight: theme.typography.fontWeightRegular\n    },\n    panelHeader: {\n        background: 'rgba(0, 0, 0, 0.8)',\n        color: 'white'\n    },\n    formWrapper: {\n        display: 'flex', \n        width:'100%', \n        alignItems:'stretch', \n        flexDirection: 'column'\n    }\n}));\n\nconst GlobalCss = withStyles({\n    '@global': {\n        '.MuiExpansionPanel-root.Mui-expanded': {\n            margin: 0,            \n        },\n    },\n})(() => null);\n\nconst GoalSetting = () => {\n    const classes = useStyles();\n    const fields = [\n        {id: 1, required: true, label: 'Field x1', fieldType: 'Date', empAccess: 'RWH', mgrAccess: 'RWH', adminAccess: 'RW'},\n        {id: 2, required: false, label: 'Field x2', fieldType: 'Text Field', empAccess: 'RWH', mgrAccess: 'RWH', adminAccess: 'RW'},\n        {id: 3, required: true, label: 'Field x3', fieldType: 'LOV', empAccess: 'RWH', mgrAccess: 'RWH', adminAccess: 'RW'},\n        {id: 4, required: false, label: 'Field x4', fieldType: 'Text Area', empAccess: 'RWH', mgrAccess: 'RWH', adminAccess: 'RW'},\n        {id: 5, required: true, label: 'Field x5', fieldType: 'Checkbox', empAccess: 'RWH', mgrAccess: 'RWH', adminAccess: 'RW'}\n    ]\n    return (\n        <>\n            <Box display=\"flex\" alignItems=\"center\" flexDirection=\"row\" className=\"button-container\">\n                <Box flexGrow={1}>\n                </Box> \n                <Box>\n                    <Button size=\"small\" variant=\"contained\" color=\"primary\">Save</Button>\n                </Box>\n                <Box>\n                    <Button size=\"small\" variant=\"contained\" color=\"primary\">Save As</Button>\n                </Box>\n                <Box>\n                    <Button size=\"small\" variant=\"contained\" color=\"primary\">Cancel</Button>\n                </Box>\n            </Box>\n            <Divider />\n            <div className={classes.root}>\n                <GlobalCss/>\n                <ExpansionPanel style={{borderBottom: '1px solid white'}}>\n                    <ExpansionPanelSummary\n                        expandIcon={<ExpandMoreIcon style={{color: 'white'}}/>}\n                        aria-controls=\"goal-setting-content\"\n                        id=\"goal-setting-header\"\n                        className={classes.panelHeader}\n                    >\n                        <Typography className={classes.heading}>Goal Basic Details</Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                        <div className={classes.formWrapper}>\n                            <form noValidate autoComplete=\"off\">\n                                    <Grid container direction=\"row\" spacing={3}>\n                                        <Grid item sm={4}>\n                                            <TextField label=\"Name\" style={{display: 'flex'}}></TextField>\n                                        </Grid>\n                                        <Grid item sm={4}>\n                                            <TextField label=\"Start Date\" \n                                                style={{display: 'flex'}} \n                                                id=\"start-date\"\n                                                type=\"date\"\n                                                InputLabelProps={{\n                                                    shrink: true\n                                                }}\n                                            >\n                                            </TextField>\n                                        </Grid>\n                                        <Grid item sm={4}>\n                                            <TextField label=\"End Date\" \n                                                style={{display: 'flex'}} \n                                                id=\"end-date\"\n                                                type=\"date\"\n                                                InputLabelProps={{\n                                                    shrink: true\n                                                }}\n                                            >\n                                            </TextField>\n                                        </Grid>\n                                        <Grid item sm={12}>\n                                                <TextareaAutosize\n                                                    style={{width: '100%'}}\n                                                    rowsMin={4}\n                                                    rowsMax={4}\n                                                    placeholder=\"Instructions\"\n                                                />\n                                        </Grid>\n                                    </Grid>\n                            </form>\n                        </div>\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n\n                <ExpansionPanel>\n                    <ExpansionPanelSummary\n                        expandIcon={<ExpandMoreIcon style={{color: 'white'}}/>}\n                        aria-controls=\"goal-setting-content-1\"\n                        id=\"goal-setting-header-1\"\n                        className={classes.panelHeader}\n                    >\n                        <Typography className={classes.heading}>Manage Fields</Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                        <div className={classes.formWrapper}>\n                            <form noValidate autoComplete=\"off\">\n                                <Grid container direction=\"row\" spacing={3}>\n                                    <Grid item sm={12}>\n                                        <Box display=\"flex\" alignItems=\"center\" flexDirection=\"row\" className=\"button-container\">\n                                            <Box flexGrow={1}>\n                                            </Box> \n                                            <Box>\n                                                <Button size=\"small\" variant=\"contained\" color=\"primary\">Add Fields</Button>\n                                            </Box>\n                                        </Box>\n                                    </Grid>\n                                    <Grid item sm={12}>\n                                        <TableContainer component={Paper} style={{width: '100%'}}>\n                                            <Table>\n                                                <TableHead>\n                                                    <TableRow>\n                                                        <TableCell>Field Id</TableCell>\n                                                        <TableCell>Label</TableCell>\n                                                        <TableCell>Required</TableCell>\n                                                        <TableCell>Field Type</TableCell>\n                                                        <TableCell>Employee Access</TableCell>\n                                                        <TableCell>Manager Access</TableCell>\n                                                        <TableCell>Admin Access</TableCell>\n                                                    </TableRow>\n                                                </TableHead>\n                                                <TableBody>\n                                                    { fields.map((field, key) => (\n                                                        <TableRow key={key}>\n                                                            <TableCell>{field.id}</TableCell>\n                                                            <TableCell>{field.label}</TableCell>\n                                                            <TableCell>{field.required ? 'Y' : 'N'}</TableCell>\n                                                            <TableCell>{field.fieldType}</TableCell>\n                                                            <TableCell>{field.empAccess}</TableCell>\n                                                            <TableCell>{field.mgrAccess}</TableCell>\n                                                            <TableCell>{field.adminAccess}</TableCell>\n                                                        </TableRow>\n                                                    ))}\n                                                </TableBody>\n                                            </Table>\n                                        </TableContainer>\n                                    </Grid>\n\n                                </Grid>\n                            </form>\n                        </div>\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n            </div>\n        \n        </>\n    )\n};\n\nexport default GoalSetting;","import React from 'react';\nimport './App.css';\nimport NavBar from './pages/NavBar';\nimport HomePage from './pages/HomePage';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport GoalSetting from './pages/GoalSetting';\nimport { Container } from '@material-ui/core';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavBar></NavBar>\n        <Container maxWidth={false}>\n          <div className=\"container-fluid\">\n            <Switch>\n              <Route path=\"/\" component={HomePage} exact/>\n              <Route path=\"/goal-setting\" component={GoalSetting}/>\n            </Switch>\n          </div>\n        </Container>\n      </div> \n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}